// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sexpToDeviceMatrix
SEXP sexpToDeviceMatrix(SEXP x, int nr, int nc, const int type_flag);
RcppExport SEXP _gpuRcuda_sexpToDeviceMatrix(SEXP xSEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(sexpToDeviceMatrix(x, nr, nc, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cudaMatToSEXP
void cudaMatToSEXP(SEXP ptrA, SEXP x, const int type_flag);
RcppExport SEXP _gpuRcuda_cudaMatToSEXP(SEXP ptrASEXP, SEXP xSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cudaMatToSEXP(ptrA, x, type_flag);
    return R_NilValue;
END_RCPP
}
// cudaMatEmtpy
SEXP cudaMatEmtpy(int nr, int nc, const int type_flag);
RcppExport SEXP _gpuRcuda_cudaMatEmtpy(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cudaMatEmtpy(nr, nc, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// sexpToDeviceVector
SEXP sexpToDeviceVector(SEXP x, int size, const int type_flag);
RcppExport SEXP _gpuRcuda_sexpToDeviceVector(SEXP xSEXP, SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(sexpToDeviceVector(x, size, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cudaVecToSEXP
void cudaVecToSEXP(SEXP ptrA, SEXP x, const int type_flag);
RcppExport SEXP _gpuRcuda_cudaVecToSEXP(SEXP ptrASEXP, SEXP xSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    cudaVecToSEXP(ptrA, x, type_flag);
    return R_NilValue;
END_RCPP
}
// cudaVecEmpty
SEXP cudaVecEmpty(int size, const int type_flag);
RcppExport SEXP _gpuRcuda_cudaVecEmpty(SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cudaVecEmpty(size, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// sexpToHostMatrix
SEXP sexpToHostMatrix(SEXP x, int nr, int nc, const int type_flag);
RcppExport SEXP _gpuRcuda_sexpToHostMatrix(SEXP xSEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(sexpToHostMatrix(x, nr, nc, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// nvMatToSEXP
void nvMatToSEXP(SEXP ptrA, SEXP x, const int type_flag);
RcppExport SEXP _gpuRcuda_nvMatToSEXP(SEXP ptrASEXP, SEXP xSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    nvMatToSEXP(ptrA, x, type_flag);
    return R_NilValue;
END_RCPP
}
// nvMatEmtpy
SEXP nvMatEmtpy(int nr, int nc, const int type_flag);
RcppExport SEXP _gpuRcuda_nvMatEmtpy(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(nvMatEmtpy(nr, nc, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// sexpToHostVector
SEXP sexpToHostVector(SEXP x, int size, const int type_flag);
RcppExport SEXP _gpuRcuda_sexpToHostVector(SEXP xSEXP, SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(sexpToHostVector(x, size, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// nvVecToSEXP
void nvVecToSEXP(SEXP ptrA, SEXP x, const int type_flag);
RcppExport SEXP _gpuRcuda_nvVecToSEXP(SEXP ptrASEXP, SEXP xSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    nvVecToSEXP(ptrA, x, type_flag);
    return R_NilValue;
END_RCPP
}
// nvVecEmpty
SEXP nvVecEmpty(int size, const int type_flag);
RcppExport SEXP _gpuRcuda_nvVecEmpty(SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(nvVecEmpty(size, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_length
int cpp_length(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRcuda_cpp_length(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_length(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ncol
int cpp_ncol(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRcuda_cpp_ncol(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ncol(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nrow
int cpp_nrow(SEXP ptrA, const int type_flag);
RcppExport SEXP _gpuRcuda_cpp_nrow(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nrow(ptrA, type_flag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpuRcuda_sexpToDeviceMatrix", (DL_FUNC) &_gpuRcuda_sexpToDeviceMatrix, 4},
    {"_gpuRcuda_cudaMatToSEXP", (DL_FUNC) &_gpuRcuda_cudaMatToSEXP, 3},
    {"_gpuRcuda_cudaMatEmtpy", (DL_FUNC) &_gpuRcuda_cudaMatEmtpy, 3},
    {"_gpuRcuda_sexpToDeviceVector", (DL_FUNC) &_gpuRcuda_sexpToDeviceVector, 3},
    {"_gpuRcuda_cudaVecToSEXP", (DL_FUNC) &_gpuRcuda_cudaVecToSEXP, 3},
    {"_gpuRcuda_cudaVecEmpty", (DL_FUNC) &_gpuRcuda_cudaVecEmpty, 2},
    {"_gpuRcuda_sexpToHostMatrix", (DL_FUNC) &_gpuRcuda_sexpToHostMatrix, 4},
    {"_gpuRcuda_nvMatToSEXP", (DL_FUNC) &_gpuRcuda_nvMatToSEXP, 3},
    {"_gpuRcuda_nvMatEmtpy", (DL_FUNC) &_gpuRcuda_nvMatEmtpy, 3},
    {"_gpuRcuda_sexpToHostVector", (DL_FUNC) &_gpuRcuda_sexpToHostVector, 3},
    {"_gpuRcuda_nvVecToSEXP", (DL_FUNC) &_gpuRcuda_nvVecToSEXP, 3},
    {"_gpuRcuda_nvVecEmpty", (DL_FUNC) &_gpuRcuda_nvVecEmpty, 2},
    {"_gpuRcuda_cpp_length", (DL_FUNC) &_gpuRcuda_cpp_length, 2},
    {"_gpuRcuda_cpp_ncol", (DL_FUNC) &_gpuRcuda_cpp_ncol, 2},
    {"_gpuRcuda_cpp_nrow", (DL_FUNC) &_gpuRcuda_cpp_nrow, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpuRcuda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
